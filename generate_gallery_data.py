import os
import json

def generate_gallery_data(base_dir=".", img_dir="img", output_file="gallery_data.js"):
    gallery_images = []
    full_img_path = os.path.join(base_dir, img_dir)

    if not os.path.exists(full_img_path):
        print(f"Error: Image directory '{full_img_path}' not found.")
        return

    for root, dirs, files in os.walk(full_img_path):
        # Get the folder name relative to the img_dir
        relative_folder = os.path.relpath(root, full_img_path)
        if relative_folder == ".":
            folder_name = "Root" # Or any default name for images directly in img/
        else:
            folder_name = relative_folder.replace(os.sep, '/') # Use forward slashes for URLs

        for file in files:
            # Check for common image extensions
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp', '.bmp', '.svg')):
                # Construct the web path
                web_path = os.path.join(img_dir, relative_folder, file).replace(os.sep, '/')
                gallery_images.append({
                    "path": web_path,
                    "folder": folder_name
                })

    # Generate JavaScript content
    js_content = f"// This file is automatically generated by GitHub Actions. Do not edit manually.\n"
    js_content += f"const galleryImages = {json.dumps(gallery_images, indent=4)};\n"

    # Write to output file
    output_full_path = os.path.join(base_dir, output_file)
    with open(output_full_path, "w", encoding="utf-8") as f:
        f.write(js_content)
    print(f"Successfully generated {output_full_path} with {len(gallery_images)} images.")

if __name__ == "__main__":
    # Assuming the script is run from the project root
    generate_gallery_data()
